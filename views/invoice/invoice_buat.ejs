<div class="container-fluid"  id="app">
    <div class="page-title-box">
        <div class="row align-items-center">
            <div class="col-sm-6">
                <h4 class="page-title"><i class="icon-paper-sheet"></i>  <%= title %></h4>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-right">
                    <li class="breadcrumb-item"><a href="javascript:void(0);">Yogi</a></li>
                    <li class="breadcrumb-item active">Dashboard</li>
                </ol>
            </div>
        </div>
        <!-- end row -->
    </div>
    <!-- end page-title -->

    <!-- START ROW -->
    <div class="row">
        <div class="col-12">
            <div class="card m-b-30">
                <div class="card-body">

                    <h4 class="mt-0 mb-4 header-title">Input data invoice</h4>
                    
                    <div class="form-group row">
                        <label for="example-date-input" class="col-sm-2 col-form-label">Tanggal</label>
                        <div class="col-auto">
                            <div class="input-group">
                                <vuejs-datepicker  v-model="data.tanggal" @input="convertDataTanggal" :format="customFormatter"></vuejs-datepicker>
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Nama Penerima</label>
                            <div class="col-md-5">
                                <select class="form-control" v-model="data.kodeClient">
                                    <option disabled style="color: gainsboro" >pilih Nama Client</option>
                                    <option  v-for="dataClient in dataClients" :key="dataClient.kode" :value="dataClient.kode">{{dataClient.nama}}</option>
                                </select>
                            </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Pilih Data Invoice</label>
                            <div class="col-sm-5">
                                <select class="form-control" v-model="data.jenisItem">
                                    <option disabled style="color: gainsboro;">pilih produk</option>
                                    <option :value="typeItemBarangJadi">Data Barang Jadi</option>
                                    <option :value="typeItemBarangReturn">Data Barang Return</option>
                                    <option :value="typeItemBarangSisa">Data Barang Sisa</option>
                                </select>
                            </div>
                    </div>
                    <div v-if="data.jenisItem == typeItemBarangJadi " class="form-group row">
                        <label for="example-text-input" class="col-sm-2 col-form-label">Pilih Data Barang Jadi</label>
                        <div class="col-sm-5">
                            <multiselect  v-model="data.itemBarangJadi" :options="optionsBarangJadi" :multiple="true" :close-on-select="false" :clear-on-select="false" :preserve-search="true" placeholder="" :custom-label="customItemNameBarangJadi" label="id" track-by="id">
                                <template slot="selection" slot-scope="{ values, search, isOpen }"><span class="multiselect__single" v-if="values.length &amp;&amp; !isOpen">{{ values.length }} options selected</span></template>
                            </multiselect>
                        </div>
                    </div>
                    <div v-if="data.jenisItem == typeItemBarangReturn " class="form-group row">
                        <label for="example-text-input" class="col-sm-2 col-form-label">Pilih Data Barang Return</label>
                        <div class="col-sm-5">
                            <multiselect  v-model="data.itemBarangReturn" :options="optionsBarangReturn" :multiple="true" :close-on-select="false" :clear-on-select="false" :preserve-search="true" placeholder="" :custom-label="customItemName" label="id" track-by="id">
                                <template slot="selection" slot-scope="{ values, search, isOpen }"><span class="multiselect__single" v-if="values.length &amp;&amp; !isOpen">{{ values.length }} options selected</span></template>
                            </multiselect>
                        </div>
                    </div>
                    <div v-if="data.jenisItem == typeItemBarangSisa " class="form-group row">
                        <label for="example-text-input" class="col-sm-2 col-form-label">Pilih Data Barang Sisa</label>
                        <div class="col-sm-5">
                            <multiselect  v-model="data.itemBarangSisa" :options="optionsBarangSisa" :multiple="true" :close-on-select="false" :clear-on-select="false" :preserve-search="true" placeholder="" :custom-label="customItemName" label="id" track-by="id">
                                <template slot="selection" slot-scope="{ values, search, isOpen }"><span class="multiselect__single" v-if="values.length &amp;&amp; !isOpen">{{ values.length }} options selected</span></template>
                            </multiselect>
                        </div>
                    </div>
                    <div  v-if="data.itemBarangJadi.length != 0 " v-for="itemBarangJadi in data.itemBarangJadi" class="form-group row" style="margin:0">
                        <label for="example-text-input" class="col-sm-2 col-form-label"></label>
                        <div class="col-sm-3" >
                            <div  @click="sortItemBarangJadi(itemBarangJadi)" class="alert alert-dark alert-dismissible fade show" role="alert" >
                                <b>{{itemBarangJadi.id}}</b> 
                                <div>tanggal : {{itemBarangJadi.tanggal}}</div>  
                                <div>jumlah: {{itemBarangJadi.totalJumlahSisa}} </div>
                                <div>total harga: {{convertFloatToRupiah(itemBarangJadi.totalHargaBarang.toString())}}</div>
                            </div>
                        </div>
                    </div>
                    <div  v-if="data.itemBarangReturn.length != 0 " v-for="itemBarangReturn in data.itemBarangReturn" class="form-group row" style="margin:0">
                        <label for="example-text-input" class="col-sm-2 col-form-label"></label>
                        <div class="col-sm-3" >
                            <div  class="alert alert-primary alert-dismissible fade show" role="alert" >
                                <b>{{itemBarangReturn.id}}</b> 
                                <div>tanggal : {{itemBarangReturn.tanggal}}</div>  
                                <div>jumlah: {{itemBarangReturn.jumlah}} </div>
                                <div>total harga: {{convertFloatToRupiah(itemBarangReturn.harga.toString())}}</div>
                            </div>
                        </div>
                    </div>
                    <div  v-if="data.itemBarangSisa.length != 0 " v-for="itemBarangSisa in data.itemBarangSisa" class="form-group row" style="margin:0">
                        <label for="example-text-input" class="col-sm-2 col-form-label"></label>
                        <div class="col-sm-3" >
                            <div @click="sortItemBarangSisa(itemBarangSisa)" class="alert alert-primary alert-dismissible fade show" role="alert" >
                                <b>{{itemBarangSisa.id}}</b> 
                                <div>tanggal : {{itemBarangSisa.tanggal}}</div>  
                                <div>jumlah: {{itemBarangSisa.jumlah}} </div>
                                <div>total harga: {{convertFloatToRupiah(itemBarangSisa.totalHargaBarang.toString())}}</div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="example-search-input" class="col-sm-2 col-form-label">Grand Total (Rp)</label>
                        <div class="col-sm-5">
                            <input disabled class="form-control" v-model="grandTotal" type="text" value="" id="example-search-input">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="example-text-input" class="col-sm-2 col-form-label">Keterangan</label>
                        <div  class="col-sm-5">
                            <textarea required  v-model="data.ket" class="form-control" rows="3"></textarea>
                        </div>
                    </div>
                    <div class="form-group text-right">
                        <div>
                            <button @click="previewInvoice" :disabled="isButtonPreviewDisable" type="submit" class="btn btn-success waves-effect waves-light">
                                Preview
                            </button>
                            <button @click="checkValidation()" type="submit" class="btn btn-primary waves-effect waves-light">
                                Submit
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div> <!-- end col -->
    </div>
    <!-- END ROW -->

 
    <!--  Modal content for the above example -->
    <div v-if="modalBarangJadi">
        <div class="modals  show">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title mt-0" id="myLargeModalLabel"></h5>Konfrimasi Data</h5>
                        {{sortedItemBarangJadi.id}}
                        <button @click="closeModalBarangJadi" type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group row">
                            <label for="example-text-input" class="col-sm-2">banyak</label>
                            <div class="col-sm-2">
                                {{sortedItemBarangJadi.totalJumlah}}
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="example-text-input" class="col-sm-2">sisa</label>
                            <div class="col-sm-2">
                                {{sortedItemBarangJadi.totalJumlahSisa}}
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="example-search-input" class="col-sm-2 col-form-label">Masukkan ke barang return</label>
                            <div class="col-sm-8">
                                <input v-model="sortedItemBarangJadi.jmlMasukBarangReturn" class="form-control" type="number" value="" id="example-search-input">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="example-search-input" class="col-sm-2 col-form-label">Masukkan ke barang sisa </label>
                            <div class="col-sm-8">
                                <input  v-model="sortedItemBarangJadi.jmlMasukBarangSisa" class="form-control" type="number" value="" id="example-search-input">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col py-3 text-center">
                            <button @click="saveDataSortItemBarangJadi" type="button" class="btn btn-primary waves-effect waves-light">Simpan</button>
                            </div>
                        </div>
                    </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>
        <div @click="closeModalBarangJadi" class="modals-backdrop"></div>
    </div>
    <!-- /.modal -->

    <!--  Modal content for the above example -->
    <div v-if="modalBarangSisa">
        <div class="modals  show">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title mt-0" id="myLargeModalLabel"></h5>Konfrimasi Data</h5>
                        {{sortedItemBarangSisa.id}}
                        <button @click="closeModalBarangSisa" type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group row">
                            <label for="example-text-input" class="col-sm-2">Harga</label>
                            <div class="col-sm-2">
                                {{convertFloatToRupiah(sortedItemBarangSisa.hargaBarang)}}
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="example-search-input" class="col-sm-2 col-form-label">Harga Baru</label>
                            <div class="col-sm-8">
                                <input v-model="sortedItemBarangSisa.hargaBarang" class="form-control" type="harga" value="" id="example-search-input">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col py-3 text-center">
                            <button @click="saveDataSortItemBarangSisa" type="button" class="btn btn-primary waves-effect waves-light">Simpan</button>
                            </div>
                        </div>
                    </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>
        <div @click="closeModalBarangSisa" class="modals-backdrop"></div>
    </div>
    <!-- /.modal -->

    <!--  Modal content for the above example -->
    <div v-if="modalPreview">
        <div class="modals  show">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title mt-0" id="myLargeModalLabel"></h5>Preview Invoice</h5>
                        <button @click="closeModalPreview" type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-12">
                                <div class="panel panel-default">
                                    <div class="p-2">
                                        <h3 class="panel-title font-20"><strong>
                                            Invoice</strong></h3>
                                    </div>
                                    <div>
                                        <div class="row">
                                            <div class="col-6">
                                                <address>
                                                    <strong>Penerima : </strong><br>
                                                    {{getNamaClient(data.kodeClient)}}
                                                </address>
                                            </div>
                                            <div class="col-6 text-right">
                                                <address>
                                                    <strong>Tanggal:</strong><br>
                                                    {{data.tanggal}}<br><br>
                                                </address>
                                            </div>
                                        </div>
                                        <div class="table-responsive">
                                            <table class="table">
                                                <thead>
                                                <tr>
                                                    <td><strong>Barang</strong></td>
                                                    <td class="text-center"><strong>Banyak</strong>
                                                    <td class="text-center"><strong>Harga</strong></td>
                                                    </td>
                                                    <td class="text-right"><strong>Total</strong></td>
                                                </tr>
                                                </thead>
                                                <tbody v-if="data.jenisItem == typeItemBarangJadi">
                                                <tr v-for="item in data.itemBarangJadi">
                                                    <td>{{item.id}}</td>
                                                    <td class="text-center">{{item.totalJumlahSisa}}</td>
                                                    <td class="text-center">{{convertFloatToRupiah(item.hargaBarang)}}</td>
                                                    <td class="text-right">{{convertFloatToRupiah(item.totalHargaBarang.toString())}}</td>
                                                </tr>
                                                <tr>
                                                    <td class="no-line"></td>
                                                    <td class="no-line"></td>
                                                    <td class="no-line text-center">
                                                        <strong>Grand Total</strong></td>
                                                    <td class="no-line text-right"><h4 class="m-0">{{convertFloatToRupiah(data.grandTotal.toString())}}</h4></td>
                                                </tr>
                                                </tbody>
                                                <tbody v-else-if ="data.jenisItem == typeItemBarangReturn">
                                                    <tr v-for="item in data.itemBarangReturn">
                                                        <td>{{item.id}}</td>
                                                        <td class="text-center">{{item.jumlah}}</td>
                                                        <td class="text-center">{{convertFloatToRupiah(item.harga)}}</td>
                                                        <td class="text-right">{{convertFloatToRupiah(item.totalHarga.toString())}}</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="no-line"></td>
                                                        <td class="no-line"></td>
                                                        <td class="no-line text-center">
                                                            <strong>Grand Total</strong></td>
                                                        <td class="no-line text-right"><h4 class="m-0">{{convertFloatToRupiah(data.grandTotal.toString())}}</h4></td>
                                                    </tr>
                                                    </tbody>
                                                    <tbody  v-else-if ="data.jenisItem == typeItemBarangSisa">
                                                        <tr v-for="item in data.itemBarangSisa">
                                                            <td>{{item.id}}</td>
                                                            <td class="text-center">{{item.jumlah}}</td>
                                                            <td class="text-center">{{convertFloatToRupiah(item.hargaBarang)}}</td>
                                                            <td class="text-right">{{convertFloatToRupiah(item.totalHargaBarang.toString())}}</td>
                                                        </tr>
                                                        <tr>
                                                            <td class="no-line"></td>
                                                            <td class="no-line"></td>
                                                            <td class="no-line text-center">
                                                                <strong>Grand Total</strong></td>
                                                            <td class="no-line text-right"><h4 class="m-0">{{convertFloatToRupiah(data.grandTotal.toString())}}</h4></td>
                                                        </tr>
                                                    </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div> 
                        </div>
                        <!-- end row -->
                    </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>
        <div @click="closeModalPreview" class="modals-backdrop"></div>
    </div>
    <!-- /.modal -->

    


</div>

<script>
    const apiUrl = '<%=process.env.URL%>'
    var app = new Vue({
     el: '#app',
     components: {
            vuejsDatepicker, Multiselect: window.VueMultiselect.default
    },
     data: {
         data:{
            tanggal:'',
            kodeClient:'',
            itemBarangJadi: [],
            itemBarangReturn: [],
            itemBarangSisa: [],
            grandTotal:'',
            ket:'',
            jenisItem:'',
            tglSekarang:moment().format('YYYY-MM-DD'),
            userAkun:''
         },
         indexChoosedItem:-1,
         sortedItemBarangJadi: {},
         sortedItemBarangSisa: {},
         modalBarangJadi:false,
         modalBarangSisa:false,
         modalPreview:false,
         options: [],
         grandTotal: '',
         dataClients:{},
         dataHargaBarangReturn:{},
         typeItemBarangJadi:'1',
         typeItemBarangReturn:'2',
         typeItemBarangSisa:'3',
         optionsBarangJadi: [],
         optionsBarangReturn: [],
         optionsBarangSisa: [],
         isButtonDisable: false,
         isButtonPreviewDisable: true
     },
     async created(){
        await this.getDataItemBarangJadi()
        await this.getDataItemBarangReturn()
        await this.getDataItemBarangSisa()
        await this.getMasterClient()
        await this.getDataHargaBarangReturn()
     },
     watch: {
        'sortedItemBarangJadi.jmlMasukBarangReturn':async function(val){
            this.checkTotalBalance('barang return')
         },
        'sortedItemBarangJadi.jmlMasukBarangSisa':async function(val){
            this.checkTotalBalance('barang sisa')
         },
        'sortedItemBarangJadi.totalJumlahSisa' : function(val){
            this.setItemTotalHargaBarang()
         },
        'sortedItemBarangSisa.hargaBarang' : function(val){
            this.setItemTotalHargaBarang()
         },
        'data.jenisItem' : async function(val){
            this.setEmptyItemBarang()
         },
        'data.itemBarangJadi' : async function (val){
            console.log(this.data.itemBarangJadi)
            if(val.length == 0){
                this.grandTotal = ""
            }else{
                this.calculateGrandTotal()
            }
            await this.getDataItemBarangJadi() 
        },
        'data.itemBarangReturn' : async function (val){
            console.log(val)
          if(val.length == 0){
              this.grandTotal = ""
          }else{
              this.calculateGrandTotal()
          }
            await this.getDataItemBarangReturn() 
        },
        'data.itemBarangSisa' : async function (val){
            if(val.length == 0){
              this.grandTotal = ""
          }else{
              this.calculateGrandTotal()
          }
            await this.getDataItemBarangSisa() 
        },
        'data.kodeClient' : async function (val){
            if (this.grandTotal != ""){
                    this.setEnableButtonPreview()
            }
        },
        grandTotal : function (val){
            if (this.grandTotal != ""){
                this.grandTotal  = this.convertFloatToRupiah(val.toString())
                this.data.grandTotal = this.convertRupiahToFloat(this.grandTotal)
                if (this.data.kodeClient != ""){
                    this.setEnableButtonPreview()
                }
            }else{
                this.data.grandTotal = ""
                this.setDisableButtonPreview()
            }
        }
     },
     methods:{
        actTambah: async function() {
            try{
                this.setDisableButton()
                var data = this.data
                let res = await axios.post(apiUrl+'invoice/tambah', { data:data })
                if (res.data.success){
                    this.setEnableButton()
                    this.alertSuccess(res.data.msg)
                    setTimeout(function(){ window.location.href =apiUrl + 'invoice/'; }, 1000);
                }
            }catch(err){
                alert("Add data"+' '+err)
                this.setEnableButton()
                return false 
            }
        },
        customFormatter(date) {
            return moment(date).format("DD/MM/YYYY");
        },
        getDataItemBarangJadi: async function() {
            try{
                 const res = await axios.post(apiUrl+'dataproduksi/barangjadi')
                 res.data.forEach((item) => { 
                    item.totalHargaBarang = (parseInt(item.hargaBarang) * item.totalJumlah)
                    item.totalJumlahSisa =  item.totalJumlah
                    item.jmlMasukBarangReturn = 0
                    item.jmlMasukBarangSisa = 0
                    })
                 this.optionsBarangJadi = res.data
                 
             }catch(err){
                 alert("Get data Item Barang Jadi"+' '+err)
                 return false 
             }
        },
        getDataItemBarangReturn: async function() {
            try{
                 const res = await axios.post(apiUrl+ 'barangreturn')
                 this.optionsBarangReturn = res.data
             }catch(err){
                 alert("Get data Item Barang Return"+' '+err)
                 return false 
             }
        },
        getDataItemBarangSisa: async function() {
            try{
                 const res = await axios.post(apiUrl+ 'barangsisa')
                 this.optionsBarangSisa = res.data
             }catch(err){
                 alert("Get data Item Barang Sisa"+' '+err)
                 return false             }
        },
        getMasterClient: async function() {
            try{
                const res = await axios.get(apiUrl + 'master/client')
                this.dataClients = res.data
            }catch(err){
                alert("Get Client"+' '+err)
                return false 
            }
        },
        getDataHargaBarangReturn: async function() {
            try{
                const res = await axios.post(apiUrl+'setup/hargabarangreturn')
                this.dataHargaBarangReturn = res.data[0]
            }catch(err){
                alert("Get data"+' '+err)
            }
        },
        sortItemBarangJadi: async function(data) {
            this.sortedItemBarangJadi = Object.assign({}, data) 
            const indexChoosedItem = this.data.itemBarangJadi.indexOf(data)
            this.indexChoosedItem = indexChoosedItem 
            this.modalBarangJadi = true
        },
        sortItemBarangSisa: async function(data) {
            console.log('sorted')
            this.sortedItemBarangSisa = Object.assign({}, data) 
            const indexChoosedItem = this.data.itemBarangSisa.indexOf(data)
            this.indexChoosedItem = indexChoosedItem 
            this.modalBarangSisa = true
        },
        checkTotalBalance: async function (item){
            const jmlMasukBarangSisaInt = this.sortedItemBarangJadi.jmlMasukBarangSisa != ""? parseInt(this.sortedItemBarangJadi.jmlMasukBarangSisa) : 0
            const jmlMasukBarangReturnInt = this.sortedItemBarangJadi.jmlMasukBarangReturn != ""? parseInt(this.sortedItemBarangJadi.jmlMasukBarangReturn) : 0
            const jmlBarangInt = parseInt(this.sortedItemBarangJadi.totalJumlah)
            var data = {jmlBarangInt,jmlMasukBarangReturnInt,jmlMasukBarangSisaInt}
            await this.updateItemTotalJumlahSisa(data)
            if (item == "barang return") {
                if ( jmlMasukBarangReturnInt > jmlBarangInt || jmlMasukBarangReturnInt > (jmlBarangInt - jmlMasukBarangSisaInt) ){
                    alert('melebihi jumlah barang')
                    this.sortedItemBarangJadi.jmlMasukBarangReturn = 0
                } 
            } else if (item == "barang sisa") {
                if ( jmlMasukBarangSisaInt > jmlBarangInt || jmlMasukBarangSisaInt > (jmlBarangInt - jmlMasukBarangReturnInt) ){
                    alert('melebihi jumlah barang')
                    this.sortedItemBarangJadi.jmlMasukBarangSisa = 0
                }
            }
        },
        updateItemTotalJumlahSisa(data){
            var {jmlBarangInt,jmlMasukBarangReturnInt,jmlMasukBarangSisaInt} = data
            this.sortedItemBarangJadi.totalJumlahSisa = jmlBarangInt - jmlMasukBarangSisaInt - jmlMasukBarangReturnInt
        },
        calculateGrandTotal:async function(){
            let total = 0
            let jenisItem = this.data.jenisItem
            console.log(jenisItem)
            if (jenisItem == this.typeItemBarangJadi ){
                total = this.data.itemBarangJadi.map((item) => ( parseInt(item.hargaBarang) * (parseInt(item.totalJumlahSisa)) ))
            }else if (jenisItem == this.typeItemBarangReturn ){
                total = this.data.itemBarangReturn.map((item) => ( parseInt(this.dataHargaBarangReturn.harga) * (parseInt(item.jumlah)) ))
            }else if (jenisItem == this.typeItemBarangSisa ){
                total = this.data.itemBarangSisa.map((item) => ( parseInt(item.hargaBarang) * (parseInt(item.jumlah)) ))
            }
            console.log(this.data.itemBarangSisa)
            console.log('item barang sisa', this.data.itemBarangSisa)
            console.log('item barang jadi', this.data.itemBarangJadi)
            const grandTotal = total.reduce((currentTotal, item) => item + currentTotal)
            this.grandTotal =  grandTotal
        },
        setItemTotalHargaBarang(){
            console.log('set total')
            let jenisItem = this.data.jenisItem
            if (jenisItem == this.typeItemBarangJadi ){
                this.sortedItemBarangJadi.totalHargaBarang = parseInt(this.sortedItemBarangJadi.hargaBarang) * parseInt(this.sortedItemBarangJadi.totalJumlahSisa)
            }else if (jenisItem == this.typeItemBarangSisa ){
                console.log('sini')
                this.sortedItemBarangSisa.totalHargaBarang = parseInt(this.sortedItemBarangSisa.hargaBarang) * parseInt(this.sortedItemBarangSisa.jumlah)
            }
        },
        saveDataSortItemBarangJadi() {
            this.data.itemBarangJadi[this.indexChoosedItem] = this.sortedItemBarangJadi
            this.calculateGrandTotal()
            this.closeModalBarangJadi()
        },
        saveDataSortItemBarangSisa() {
            this.data.itemBarangSisa[this.indexChoosedItem] = this.sortedItemBarangSisa
            this.calculateGrandTotal()
            this.closeModalBarangSisa()
        },
        closeModalBarangJadi: async function(){
            this.sortedItemBarangJadi = {}
            this.modalBarangJadi = false
            this.indexChoosedItem = -1
        },
        closeModalBarangSisa: async function(){
            this.sortedItemBarangSisa = {}
            this.modalBarangSisa = false
            this.indexChoosedItem = -1
        },
        previewInvoice(){
            this.modalPreview = true
        },
        closeModalPreview: async function(){
            this.modalPreview = false
        },
        checkValidation: async function(){
            console.log(this.data)
            var validate = false
            if (this.data.tanggal == "" || this.data.kodeClient == null
            || this.data.grandTotal == ""  || this.data.ket == "") {
                validate = false
            } else {
                validate = true
            }

            if(validate){
                this.alertAdd()
            }else{
                alert("Harap isi semua field")
            }
        },
        convertFloatToRupiah: function(val) {
            var txtNumber = parseFloat(val.replace(/,/g, ''))
            var txtString = txtNumber.toString()
            var sisa = txtString.length % 3
            var rupiah = txtString.substr(0, sisa)
            var ribuan = txtString.substr(sisa).match(/\d{3}/g)
            if (ribuan) {
                var separator = sisa ? ',' : ''
                rupiah += separator + ribuan.join(',')
            }
            return rupiah
        },
        convertRupiahToFloat: function(val){
            var txtNumber = parseFloat(val.replace(/,/g, ''))
            return txtNumber
        },
        convertDataTanggal: function(val){
            var convert = moment(val).format("YYYY-MM-DD")
            this.data.tanggal = convert
        },
        alertAdd:  function (data) {
             swal({
                title: "Anda yakin ingin menambah data?",
                text: "Pastikan data yang anda masukkan benar",
                icon: "warning",
                buttons: ["batal", "tambah"],
                dangerMode: false,
                })
                .then((willAdd) => {
                if (willAdd) {
                     this.actTambah(data)
                }
            });
        },
        alertSuccess: function (message){
            swal({
                title:"",
                text:message, 
                icon:"success",
                buttons:false});
        },
        setEnableButton: function(){
            this.isButtonDisable = false
        },
        setDisableButton: function(){
            this.isButtonDisable = true
        },
        setEnableButtonPreview: function(){
            this.isButtonPreviewDisable = false
        },
        setDisableButtonPreview: function(){
            this.isButtonPreviewDisable = true
        },
        customItemNameBarangJadi ({ id, tanggal, totalJumlah}) {
            return `${id} — [${tanggal}, ${totalJumlah}]`
        },
        customItemName ({ id, tanggal, jumlah}) {
            return `${id} — [${tanggal}, ${jumlah}]`
        },
        getTotalItem: function(){
            if(this.data.item != null){
                var item = this.data.item
                this.data.jumlah =  item.totalJumlah
                const totalBiaya = item.totalBiaya ? parseInt(item.totalBiaya) : 0
                const upah = item.upah ? parseInt(item.upah) : 0
                this.hargaSetelahJahit = totalBiaya  + upah
            }else{
                this.data.jumlah = ''
                this.hargaSetelahJahit = ''
            }
        },
        getNamaClient: function(kode){
            console.log(kode)
            let namaClient = this.dataClients.find((item) => item.kode == kode).nama
            console.log(namaClient)
            return namaClient
        },
        setEmptyItemBarang:function(){
            this.data.itemBarangJadi = []
            this.data.itemBarangReturn = []
            this.data.itemBarangSisa = []
        }
     }
})
 </script>

 <style>
.modals{
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1050;
    display: block;
    width: 100%;
    height: 100%;
    overflow: hidden;
    outline: 0;
    opacity: 100;
}
    
.modals-backdrop{
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1040;
    width: 100vw;
    height: 100vh;
    background-color: #000;
    opacity: .5;
}
 </style>
